기존의 게임을 아래처럼 확장하세요.

1.게임이 시작하면 아래처럼 메뉴를 보이도록하세요.
1_1 1.로그인하기 2.사용자 계정생성 3.기타 메뉴보기

1_2 1.로그인하기를 선택한경우 -> 사용자의 ID를 입력받아서,해당 사용자가
게임을 진행한 이력이 있는지 검사(즉 해당 사용자의 id.data) 파일이 존재하면
이 사용자는 멤버 게임 플레이어로 인식합니다. 이후 암호를 입력받아서 기존
회원가입시 설정된 암호와 같은지 비교해서 모두 맞다면, id님 로그인을 환영합니다.
만약 틀리다면, 암호가 틀리다고 말해주고 3번까지만 재입력 기회주고 , 안되면 , 관리자에게
연락바란다는 메세지와 함께 게임종료해주세요. 만약 로그인되면
아래와 같은 메세지를 띄우고 아래와 같은 메뉴를 올려주세요.

위 1.2.1이 Confirm 시 아래로 분기하세요

2.2.1> 1.게임하기 2.전적보기 3.마지막 로그인날짜 확인하기 4.암호 변경
1.게임하기를 선택하면 기존처럼 게임을 진행토록하고, 게임이 끝나면 더할지 여부
2.만약 그만한다고 하면 잘가라는 메세지를 전달하고 게임은 끝. 이때 사용자의
로그인시간과 , 로그아웃시간, 그날의 전적을 기존 전적에 더해 승률까지 추출하여
해당 사용자파일에 저장 즉 항상 사용자의 파일엔 가장 최근에 로그인/아웃 정보가 저장되어야 합니다.

2.2.2> 사용자 계정 생성을 선택한경우엔 사용자의 id를 입력받으세요. 형식은 Email 형식이고
@이후를 분리한 실제 id값이 다른유저와 같은게 있는지 검증하세요. 물론 , 메일입력시 형식검증
(6~12자 사이,첫대문자, 숫자하나이상포함)은 기본적으로 구현되어야합니다.
ID가 생성되면, 비번을 물어서 비번입력후 파일에 저장시키세요.

만약 id 있다면, 사용할수 없는 id라고 출력시키고, 재입력받도록하세요
만약 중복id가 없다면, 사용자의 id.data 파일을 생성하고 첫 생성시엔 파일 내용에
regDate : 가입한 날짜의 yyyy-MM-DD apm hh:mm:dd 로 저장시키세요
이렇게 생성된 신규 사용자에게는 환영 메세지와 함께 암호도 입력받아서 같이 저장시키세요
모두 완료된 회원은 로그인하겠는지 물어보고 한다면 위 로그인 메세지가 띄워지도록 하세요 

2.2.3> 3번을 선택한경우 마지막 로그인날짜를 출력 해주시고, 다시 메뉴를 출력시키세요.

2.2.4> 4번을 선택하면 기존 암호를 묻고, 같다면 신규암호로 업데이트 시켜주세요
이후 변경된 암호로 로긴할 수 있도록 유도하세요.

만약 사용자가 위 1_1 에서 기타메뉴보기를 선택하면 아래처럼 메뉴가 보입니다.
1.총 플레이어수
2.승률 1위 플레이어 : id의 끝 3자리는 *** 로 표시 및 승률 표시
3.승률 꼴지부터 보기 선택시 승률 제일 아래인 사용자부터 전체사용자를 출력해주고
역시 ID의 끝 3자리는 ***로 표기합니다.
4.승률 1위부터 보기는 반대로 보여주고, id 끝 3자리는 ***로 표기합니다.

이상과 같이 구현하시는데, 각 기능별 클래스를 최대한 상세히 분류 하시고(상속 안해도됨)
업무별로 반드시 한사람이 한 업무(Business Logic)을 맡아야 합니다.

사용자의 모든데이터는 반드시 DTO 를 이용해서 하시고, 파일에 저장할 때는 DAO를 구현해서 하세요
이때 DAO 는 공통의 기능처럼 최대한 다양한 목적에 사용되어야 합니다.